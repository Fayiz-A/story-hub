{"version":3,"sources":["components/AppBar.tsx","components/TextField.tsx","components/CustomButton.tsx","configs/firebase.config.ts","globals.tsx","screens/WriteStoryScreen.tsx","screens/ReadStoryScreen.tsx","screens/PlatformScreen.tsx","screens/StoryContentScreen.tsx","App.tsx","assets/read.png","assets/write.png"],"names":["AppBar","props","View","style","styles","container","Text","textStyle","this","title","React","StyleSheet","create","fontSize","fontWeight","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","alignItems","justifyContent","backgroundColor","TextField","state","dimensions","Dimensions","get","addEventListener","window","screen","setState","removeEventListener","console","log","TextInput","textField","placeholder","onChangeText","multiline","ref","reference","Component","defaultProps","borders","textInputWidth","textInputHeight","borderColor","borderWidth","borderTopStartRadius","borderBottomStartRadius","borderRadius","paddingLeft","CustomButton","buttonSurrounding","TouchableOpacity","button","onPress","color","paddingTop","fontFamily","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","collections","names","stories","documents","fields","author","story","authorNameMinimumLength","titleMinimumLength","storyMinimumLength","errorMessages","authorNameTooShort","storyTooShort","titleTooShort","unknownError","font","size","family","WriteStoryScreen","validateAndSubmitStory","storyWritten","a","async","storyValidationErrors","storyValidations","GLOBALS","storyNameMinimumLength","JSON","stringify","trim","length","showToastMessagesToUser","firestore","collection","add","catch","err","error","clearInputs","inputs","map","input","clear","message","Platform","OS","ToastAndroid","show","LONG","alert","storyTextFieldSize","textFieldDataList","text","KeyboardAvoidingView","background","behavior","enabled","data","textInputStyles","storyTextField","textInput","push","customButtonWidth","ReadStoryScreen","getAllStoriesFromFirestore","lastVisibleStory","query","orderBy","limit","startAfter","then","res","_stories","docs","doc","displayStories","searchForStories","searchText","searchResults","where","ScrollView","responsiveStyles","storySearchBarContainer","value","searchStoryButton","searchStoryButtonText","activityIndicatorContainer","ActivityIndicator","animating","noStoriesFoundContainer","listTileTextTitle","FlatList","contentContainerStyle","paddingBottom","renderItem","index","storyData","keyExtractor","item","toString","onEndReachedThreshold","onEndReached","ListTile","letters","split","i","Math","floor","random","listTileContainer","marginTop","marginHorizontal","navigation","navigate","routeName","params","listTileTextContainer","listTileText","flexDirection","borderTopEndRadius","borderBottomEndRadius","paddingHorizontal","borderTopWidth","borderBottomWidth","borderEndWidth","paddingVertical","Tab","createBottomTabNavigator","PlatformScreen","NavigationContainer","Navigator","screenOptions","route","tabBarIcon","imagePath","focused","name","require","imageSize","Image","source","tabBarOptions","activeTintColor","inactiveTintColor","Screen","children","component","StoryContentScreen","getParam","storyContentContainer","storyContent","Infinity","App","AppContainer","SwitchNavigator","createSwitchNavigator","createAppContainer","module","exports"],"mappings":"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","file":"static/js/app.02962016.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport interface Props {\n  title: String,\n}\n\nclass AppBar extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.textStyle}>{this.props.title}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  textStyle: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  container: {\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.5,\n    shadowRadius: 2,\n    elevation: 2,    \n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: 60,\n    backgroundColor: \"cyan\"\n  },\n});\n\nexport default AppBar;\n","import React from \"react\";\nimport { View, TextInput, StyleSheet, Dimensions, ScaledSize } from \"react-native\";\n\nexport interface Props {\n   textInputWidth: number,\n   textInputHeight: number,\n   placeholder: string,\n   onChangeText: (text: string) => void,\n   multiline: boolean,\n   reference?: (input: TextInput) => void,\n   borders?: 1|2\n}\n\nexport interface State {\n   dimensions: ScaledSize\n}\n\nexport default class TextField extends React.Component<Props, State> {\n\n   constructor(props: Props, state: State) {\n      super(props, state);\n\n      this.state = {\n         dimensions: Dimensions.get(\"window\")\n      }\n   }\n\n   componentDidMount() {\n      Dimensions.addEventListener(\"change\", ({ window, screen }) => {\n         this.setState({\n            dimensions: window\n         })\n      })\n   }\n\n   componentWillUnmount() {\n      Dimensions.removeEventListener(\"change\", ({ window, screen }) => {\n         console.log(`Event listener for dimensions removed in text field.tsx`)\n      });\n   }\n\n   render() {\n      return (\n         <TextInput\n            style={styles(this.props, this.state.dimensions).textField}\n            placeholder={this.props.placeholder}\n            onChangeText={this.props.onChangeText}\n            multiline={this.props.multiline}\n            ref = {this.props.reference}\n         />\n      );\n   }\n}\n\n//the statement is not an error. This is the only way it is done and this is an existing bug in eslint\nTextField.defaultProps = {\n   borders: 2\n}\n\nconst styles = (props: Props, dimensions: ScaledSize) => StyleSheet.create({\n   textField: {\n      width: props.textInputWidth,\n      height: props.textInputHeight,\n      borderColor: \"black\",\n      borderWidth: 4,\n      borderTopStartRadius: props.multiline ? 20:props.borders == 1 ? props.textInputWidth:(props.textInputWidth/2) / 2,\n      borderBottomStartRadius: props.multiline ? 20:props.borders == 1 ? props.textInputWidth:(props.textInputWidth/2) / 2,\n      borderRadius: props.multiline ? 20: props.borders == 1 ? 0:(props.textInputWidth/2) / 2,\n      backgroundColor: \"white\",\n      paddingLeft: 5,\n      fontSize: dimensions.height / 30\n   }\n})\n\n","//importing the libraries\nimport React, { Component } from 'react';\nimport { Text, View, TouchableOpacity, StyleSheet, ColorValue } from 'react-native';\n\nexport interface Props {\n   onPress: () => any,\n   title: String,\n   color: ColorValue,\n   width: number,\n   paddingTop: number,\n   paddingLeft: number\n}\n\nexport default class CustomButton extends Component<Props> {\n\n   constructor(props: Props) {\n      super(props);\n\n   }\n\n  render() {\n    return (\n      <View style={styles(this.props).buttonSurrounding}>\n        <TouchableOpacity\n          style={styles(this.props).button}\n          onPress={this.props.onPress}>\n          <Text style={styles(this.props).textStyle}>{this.props.title}</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nconst styles = (props: Props) =>\n  StyleSheet.create({\n    button: {\n      backgroundColor: props.color,\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: props.width,\n      height: 55,\n      borderRadius: 28\n    },\n    buttonSurrounding: {\n      paddingTop: props.paddingTop,\n      paddingLeft: props.paddingLeft,\n    },\n    textStyle: {\n      fontSize: 20,\n      color: 'white',\n      fontFamily: 'cursive',\n      fontWeight: 'bold',\n    },\n  });\n","import firebase from 'firebase';\n// Your web app's Firebase configuration\nlet firebaseConfig:{} = {\n   apiKey: \"AIzaSyAvScS_wuEMwsA33Ob0w4TNCq6hIQi8sXM\",\n   authDomain: \"story-hub-cb066.firebaseapp.com\",\n   projectId: \"story-hub-cb066\",\n   storageBucket: \"story-hub-cb066.appspot.com\",\n   messagingSenderId: \"758016327958\",\n   appId: \"1:758016327958:web:f324bfcceb0e6a0ff09037\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;","export default {\n   readScreenName: \"Read Story\",\n   writeScreenName: \"Write Story\",\n   firestore: {\n      collections: {\n         names: {\n            stories: \"stories\"\n         },\n         documents: {\n            fields: {\n               names: {\n                  title: \"title\",\n                  author: \"author\",\n                  story: \"story\"\n               }\n            }\n         }\n      }\n   },\n   storySubmittedSuccesMessage: \"Your story has been submitted successfully!\",\n   storyValidations: {\n      //how much the length should atleast be\n      authorNameMinimumLength: 2,\n      titleMinimumLength: 2,\n      storyMinimumLength: 50,\n      errorMessages: {\n         authorNameTooShort: \"I have never heard an author name so short like this! 🤔 According to me, a name should atleast be of 2 letters.\",\n         storyTooShort: \"The story content is too short. The readers may not read such a short story! According to my experience, it should be of 50 words atleast.\",\n         titleTooShort: \"The title is too short! It should be descriptive and of atleast 2 letters.\"\n      }\n   },\n\n   errors: {\n      unknownError: \"Some error occured!\"\n   },\n\n   listTile: {\n      styles: {\n         font: {\n            size: 20,\n            family: \"cursive\"\n         }\n      }\n   }\n}","import React, { Component } from 'react';\nimport { View, StyleSheet, Dimensions, ScaledSize, ToastAndroid, Platform, TextInput, Button, Text, KeyboardAvoidingView } from 'react-native';\nimport AppBar from '../components/AppBar';\nimport TextField from '../components/TextField';\nimport CustomButton from '../components/CustomButton';\nimport firebase from '../configs/firebase.config';\nimport GLOBALS from '../globals';\n\ninterface TextFieldData {\n   height: number,\n   placeholder: string,\n   onChangeText: (text: string) => void,\n   multiline?: boolean\n}\n\nexport interface Props { }\n\nexport interface State {\n   dimensions: ScaledSize,\n}\n\ninterface Size {\n   width: number,\n   height: number\n}\n\ninterface StoryDocument {\n   author: string,\n   title: string,\n   story: string,\n}\n\nexport default class WriteStoryScreen extends React.Component<Props, State> {\n\n   constructor(props: Props, state: State) {\n      super(props, state);\n\n      this.state = {\n         dimensions: Dimensions.get(\"window\"),\n      }\n   }\n\n   componentDidMount() {\n      Dimensions.addEventListener(\"change\", ({ window, screen }) => {\n         this.setState({\n            dimensions: window\n         })\n      })\n   }\n\n   componentWillUnmount() {\n      Dimensions.removeEventListener(\"change\", ({ window, screen }) => {\n         console.log(`Event listener for dimensions removed in WriteStoryScreen.tsx`)\n      });\n   }\n\n   validateAndSubmitStory = async (storyWritten: StoryDocument) => {\n      let storyValidations = GLOBALS.storyValidations;\n      let storyValidationErrors = storyValidations.errorMessages;\n\n      let authorNameMinimumLength = storyValidations.authorNameMinimumLength;\n      let titleMinimumLength = storyValidations.titleMinimumLength;\n      let storyNameMinimumLength = storyValidations.storyMinimumLength;\n\n      console.log(`Story Written ${JSON.stringify(storyWritten)}`);\n      if (storyWritten.author.trim().length < authorNameMinimumLength) {\n         this.showToastMessagesToUser(storyValidationErrors.authorNameTooShort)\n         return false;\n      } else if (storyWritten.title.trim().length < titleMinimumLength) {\n         this.showToastMessagesToUser(storyValidationErrors.titleTooShort)\n         return false;\n      } else if (storyWritten.story.trim().length < storyNameMinimumLength) {\n         this.showToastMessagesToUser(storyValidationErrors.storyTooShort)\n         return false;\n      }\n\n      firebase.firestore().collection(GLOBALS.firestore.collections.names.stories).add({\n         title: storyWritten.title,\n         author: storyWritten.author,\n         story: storyWritten.story\n      }).catch(err => {\n         console.error(`Error occured while submitting the story: ${err}`);\n         this.showToastMessagesToUser(GLOBALS.errors.unknownError)\n         return false;\n      })\n\n      this.setState({});\n      this.showToastMessagesToUser(GLOBALS.storySubmittedSuccesMessage);\n      return true;\n\n   }\n\n   clearInputs = (inputs: TextInput[]) => {\n      inputs.map(input => {\n         if (input != null) input.clear()\n      })\n   }\n\n   showToastMessagesToUser(message: string) {\n\n      //Toast android doesn't work on any ohter thing than android\n      if (Platform.OS == 'android') {\n         ToastAndroid.show(message, ToastAndroid.LONG);\n      } else {\n         alert(message);\n      }\n\n   }\n\n   render() {\n\n      let storyWritten: StoryDocument = {\n         title: '',\n         author: '',\n         story: ''\n      };\n\n      let dimensions: ScaledSize = this.state.dimensions;\n      let storyTextFieldSize: Size = { width: dimensions.width / 2, height: dimensions.height / 13 }\n      let textFieldDataList: TextFieldData[] = [\n         {\n            height: storyTextFieldSize.height,\n            placeholder: \"Title\",\n            onChangeText: (text: string) => {\n               storyWritten.title = text;\n            },\n         },\n         {\n            height: storyTextFieldSize.height,\n            placeholder: \"Author\",\n            onChangeText: (text: string) => {\n               storyWritten.author = text;\n            }\n         },\n         {\n            height: dimensions.height / 2.15,\n            placeholder: \"Story\",\n            onChangeText: (text: string) => {\n               storyWritten.story = text;\n            },\n            multiline: true\n         }\n      ];\n      let customButtonWidth: number = 120;\n      let inputs: TextInput[] = [];\n      return (\n         <KeyboardAvoidingView style={styles(dimensions).background} behavior =\"padding\" enabled>\n            <AppBar title=\"Write Story\" />\n            {textFieldDataList.map(data => {\n               return <View style={textInputStyles(dimensions, storyTextFieldSize).storyTextField} >\n                  <TextField\n                     textInputWidth={storyTextFieldSize.width}\n                     textInputHeight={data.height}\n                     placeholder={data.placeholder}\n                     onChangeText={data.onChangeText}\n                     multiline={data.multiline == null ? false : data.multiline}\n                     reference={textInput => {\n                        inputs.push(textInput);\n                     }}\n                  />\n               </View>\n            })\n            }\n            <CustomButton\n               onPress={async () => {\n                  let submitted: boolean = await this.validateAndSubmitStory(storyWritten);\n                  if (submitted == true) this.clearInputs(inputs);\n               }}\n               title=\"Submit\"\n               color=\"red\"\n               paddingTop={20}\n               paddingLeft={(dimensions.width / 2) - (customButtonWidth / 2)}\n               width={customButtonWidth}\n            />\n         </KeyboardAvoidingView>\n      )\n   }\n}\n\nconst textInputStyles = (dimensions: ScaledSize, size: Size) => StyleSheet.create({\n   storyTextField: {\n      paddingLeft: (dimensions.width / 2) - (size.width / 2),\n      paddingTop: size.height / 2,\n   },\n})\n\nconst styles = (dimensions:ScaledSize) => StyleSheet.create({\n   background: {\n      height: dimensions.height,\n      backgroundColor: \"#ffe57f\"\n   }\n});","import React, { Component } from 'react';\nimport { View, StyleSheet, Dimensions, ScaledSize, FlatList, Text, ActivityIndicator, TouchableOpacity, ScrollView } from 'react-native';\nimport AppBar from '../components/AppBar';\nimport TextField from '../components/TextField';\nimport firebase from '../configs/firebase.config';\nimport GLOBALS from '../globals';\n\nimport {\n   NavigationParams,\n   NavigationScreenProp,\n   NavigationState,\n } from 'react-navigation';\n\nexport interface Props {\n   navigation: NavigationScreenProp<any, any>\n}\n\nexport interface State {\n   dimensions: ScaledSize,\n   stories: StoryDocument[],\n   displayStories: StoryDocument[],\n   lastVisibleStory: StoryDocument | null,\n   searchText: string\n}\n\ninterface Size {\n   width: number,\n   height: number\n}\n\ninterface StoryDocument {\n   author: string,\n   title: string,\n   story: string,\n}\n\nexport default class ReadStoryScreen extends React.Component<Props, State> {\n\n   constructor(props: Props, state: State) {\n      super(props, state);\n\n      this.state = {\n         dimensions: Dimensions.get(\"window\"),\n         stories: [],\n         displayStories: [],\n         lastVisibleStory: null,\n         searchText: \"\"\n      }\n   }\n\n   componentDidMount() {\n      Dimensions.addEventListener(\"change\", ({ window, screen }) => {\n         this.setState({\n            dimensions: window\n         })\n      })\n\n      this.getAllStoriesFromFirestore();\n   }\n\n   getAllStoriesFromFirestore = async () => {\n      let limitValue = 10;\n      let lastVisibleStory:StoryDocument|null = this.state.lastVisibleStory;\n\n      let query = lastVisibleStory == null ? \n      firebase.firestore().collection(GLOBALS.firestore.collections.names.stories).orderBy(GLOBALS.firestore.collections.documents.fields.names.title).limit(limitValue)://query from the beginning\n      firebase.firestore().collection(GLOBALS.firestore.collections.names.stories).orderBy(GLOBALS.firestore.collections.documents.fields.names.title).startAfter(lastVisibleStory.title).limit(limitValue);\n      await query.get()\n         .then(res => {\n            let _stories: StoryDocument[] = [];\n\n            res.docs.map(doc => {\n               _stories.push({\n                  author: doc.data().author,\n                  title: doc.data().title,\n                  story: doc.data().story\n               })\n            });\n            \n            _stories = [...this.state.stories, ..._stories];\n\n            let lastVisibleStory = this.state.stories[this.state.stories.length - 1];\n            this.setState({\n               stories: _stories,\n               displayStories: _stories,\n               lastVisibleStory: lastVisibleStory,\n            })\n         })\n         .catch(err => {\n            console.error(`Error occurred in fetching stories ${err}`);\n         });\n   }\n\n   searchForStories = async (searchText:string) => {\n      let searchResults: StoryDocument[] = [];\n\n      if(searchText.trim().length == 0) {\n         searchResults = this.state.stories;\n      } else {\n         await firebase.firestore().collection(GLOBALS.firestore.collections.names.stories).where(GLOBALS.firestore.collections.documents.fields.names.title, \"==\", searchText.trim()).get()\n         .then(res => {\n            res.docs.map((doc) => searchResults.push({\n               author: doc.data().author,\n               title: doc.data().title,\n               story: doc.data().story\n            }));\n         }).catch(err => {\n            console.error(`Error occurred in querying stories ${err}`);\n            alert(`Some error occurred!`)\n         })\n      }\n\n      this.setState({\n         displayStories: searchResults,\n         searchText: searchText\n      })\n   }\n\n   componentWillUnmount() {\n      Dimensions.removeEventListener(\"change\", ({ window, screen }) => {\n         console.log(`Event listener for dimensions removed in WriteStoryScreen.tsx`)\n      });\n   }\n\n   render() {\n      let dimensions:ScaledSize = this.state.dimensions;\n      let searchText:string = this.state.searchText;\n      return (\n         //if the content becomes too big, the page will be srollable\n         <ScrollView>\n            <View style={responsiveStyles(dimensions).background}>\n               <AppBar title=\"Read Story\" />\n               <View style={responsiveStyles(dimensions).storySearchBarContainer}>\n                  <TextField\n                     textInputWidth={dimensions.width / 2}\n                     textInputHeight={dimensions.height / 13}\n                     onChangeText={(value:string) => {searchText=value}}\n                     placeholder='Search for a story'\n                     multiline={false}\n                     borders={1}\n                  />\n                  <TouchableOpacity \n                     onPress = {() => {this.searchForStories(searchText)}}\n                     style={responsiveStyles(dimensions).searchStoryButton}\n                  >\n                     <Text style={responsiveStyles(dimensions).searchStoryButtonText}>Search</Text>\n                  </TouchableOpacity>\n               </View>\n               {\n                  this.state.stories.length == 0 ?\n                     <View style={responsiveStyles(dimensions).activityIndicatorContainer}>\n                        <ActivityIndicator animating={true} color=\"purple\" size={dimensions.height/3}/>\n                     </View> :\n                     this.state.displayStories.length == 0 ?\n                     <View style={responsiveStyles(dimensions).noStoriesFoundContainer}>\n                        <Text style={responsiveStyles(dimensions).listTileTextTitle}>No Stories Found</Text>\n                     </View> :\n                     <FlatList\n                        contentContainerStyle={{ paddingBottom: 100 }}\n                        data={this.state.displayStories}\n                        renderItem={({ index }) => <ListTile storyData={this.state.displayStories[index]} dimensions={dimensions} props={this.props}/>}\n                        keyExtractor={(item, index) => index.toString()}\n                        onEndReachedThreshold={100}\n                        onEndReached={() => searchText.trim().length == 0 ? this.getAllStoriesFromFirestore():console.log(`No need to fetch!`)}\n                     />\n               }\n            </View>\n         </ScrollView>\n      )\n   }\n}\n\nconst ListTile = ({ storyData, dimensions, props }: { storyData: StoryDocument, dimensions: ScaledSize, props:Props }) => {\n\n   let styles = responsiveStyles(dimensions);\n   let letters = 'BCDEF'.split('');//light color hex codes\n   let color = '#';\n   for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * letters.length)];\n   }\n\n   console.log(`Color: ${color}`)\n\n   //this is being dynamically changed so it is written here\n   let listTileContainer = {\n      backgroundColor: `${color}`,\n      marginTop: 15,\n      marginHorizontal: 10,\n      shadowColor: 'black',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.5,\n      shadowRadius: 2,\n      elevation: 2,\n      paddingLeft: 10,\n      borderRadius: 10\n   }\n\n   return (\n      <TouchableOpacity\n         onPress={() => {props.navigation.navigate({routeName: \"StoryContentScreen\", params: {story: storyData}})}}\n      >\n         <View style={listTileContainer}>\n            <View style={styles.listTileTextContainer}>\n               <Text style={styles.listTileTextTitle}>Title: </Text>\n               <Text style={styles.listTileText}>{storyData.title}</Text>\n            </View>\n            <View>\n               <View style={styles.listTileTextContainer}>\n                  <Text style={styles.listTileTextTitle}>Author: </Text>\n                  <Text style={styles.listTileText}>{storyData.author}</Text>\n               </View>\n            </View>\n         </View>\n      </TouchableOpacity>\n   );\n}\n\nconst responsiveStyles = (dimensions: ScaledSize) => StyleSheet.create({\n   background: {\n      height: dimensions.height,\n      backgroundColor: \"#ffe57f\",\n   },\n   storySearchBarContainer: {\n      flexDirection: \"row\",\n      paddingTop: 20,\n      paddingLeft: dimensions.width / 2 - (((dimensions.width / 2) / 2)+50) //dimensions.width / 2 is the width of storySearchBar and 50 is the touchable opacity width\n   },\n   searchStoryButton: {\n      backgroundColor: \"rgb(234, 111, 123)\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      borderTopEndRadius: 200,\n      borderBottomEndRadius: 200,\n      paddingHorizontal: 10,\n      borderColor: \"black\",\n      borderTopWidth: 4,\n      borderBottomWidth: 4,\n      borderEndWidth: 4\n   },\n   searchStoryButtonText: {\n      fontSize: dimensions.height / 30,\n      color: \"white\"\n   },\n   noStoriesFoundContainer: {\n      paddingLeft: 20,\n      paddingTop: 20\n   },\n   listTileTextContainer: {\n      flexDirection: \"row\",\n      paddingVertical: 2,\n   },\n   listTileTextTitle: {\n      fontWeight: \"600\",\n      fontSize: GLOBALS.listTile.styles.font.size\n   },\n   listTileText: {\n      fontSize: GLOBALS.listTile.styles.font.size\n   },\n   activityIndicatorContainer: {\n      paddingTop: dimensions.height/2-((dimensions.height/3)/2), //(dimensions.height/3) is the diameter of the activity indicator\n   },\n})","import React from 'react';\nimport { Image, ImageSourcePropType, Dimensions } from 'react-native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport WriteStoryScreen from './WriteStoryScreen';\nimport ReadStoryScreen from './ReadStoryScreen';\nimport { NavigationContainer } from '@react-navigation/native';\nimport GLOBALS from '../globals';\nimport { createAppContainer, NavigationScreenProp } from 'react-navigation';\n\nconst Tab = createBottomTabNavigator();\n\nexport interface Props {\n   navigation: NavigationScreenProp<any, any>\n}\n\nexport default class PlatformScreen extends React.Component<Props> {\n\n   constructor(props:Props) {\n      super(props);\n   }\n\n   render() {\n      return (\n         <NavigationContainer>\n            <Tab.Navigator\n               screenOptions={\n                  ({ route }) => ({\n                     tabBarIcon: ({ focused, color, size }) => {\n                        let imagePath: ImageSourcePropType;\n\n                        if (route.name == GLOBALS.readScreenName) {\n                           imagePath = require(\"../assets/read.png\");\n                        } else {\n                           imagePath = require(\"../assets/write.png\");\n                        }\n\n                        let largeScreen: boolean = Dimensions.get(\"window\").width > 700;\n                        let imageSize: number = largeScreen ? 40 : 30;\n\n                        return <Image source={imagePath} style={{ width: imageSize, height: imageSize, }} />\n                     }\n                  })\n               }\n               tabBarOptions={{\n                  activeTintColor: 'tomato',\n                  inactiveTintColor: 'gray',\n               }}\n            >\n               <Tab.Screen name={GLOBALS.writeScreenName} children={()=><ReadStoryScreen navigation = {this.props.navigation}/>} />\n               <Tab.Screen name={GLOBALS.readScreenName} component={WriteStoryScreen} />\n            </Tab.Navigator>\n         </NavigationContainer>\n      )\n   }\n}","import React from \"react\";\nimport { View, StyleSheet, Text, Button, Dimensions, ScaledSize, ScrollView } from \"react-native\";\nimport { NavigationScreenProp } from \"react-navigation\";\nimport AppBar from \"../components/AppBar\";\nimport CustomButton from \"../components/CustomButton\";\n\nexport interface Props {\n   navigation: NavigationScreenProp<any, any>\n}\n\nexport interface State {\n   dimensions: ScaledSize\n}\n\nexport default class StoryContentScreen extends React.Component<Props, State> {\n\n   constructor(props:Props, state:State) {\n      super(props, state);\n      \n      this.state = {\n         dimensions: Dimensions.get(\"window\")\n      }\n   }\n\n   componentDidMount() {\n      Dimensions.addEventListener(\"change\", ({ window, screen }) => {\n         this.setState({\n            dimensions: window\n         })\n      })\n   }\n\n   componentWillUnmount() {\n      Dimensions.removeEventListener(\"change\", ({ window, screen }) => {\n         console.log(`Event listener for dimensions removed in WriteStoryScreen.tsx`)\n      });\n   }\n\n   render() {\n      let dimensions = this.state.dimensions;\n\n      let story = this.props.navigation.getParam('story');\n\n      return (\n         <ScrollView>\n            <View style={styles(dimensions).background}>\n               <AppBar title = {story.title}/>\n               <CustomButton \n                  title=\"Back\" \n                  onPress={() => {this.props.navigation.navigate({routeName: \"PlatformScreen\"})}}\n                  color=\"red\"\n                  paddingLeft= {20}\n                  paddingTop={10}\n                  width={70}\n               />\n               <View style={styles(dimensions).storyContentContainer}>\n                  <Text\n                     style={styles(dimensions).storyContent}\n                  >\n                     {story.story}\n                  </Text>\n               </View>\n            </View>\n         </ScrollView>\n      )\n   }\n}\n\nconst styles = (dimensions:ScaledSize) => StyleSheet.create({\n   background: {\n      height: Infinity,\n      backgroundColor: \"#ffe57f\",\n   },\n   storyContentContainer: {\n      paddingLeft: 20,\n      paddingTop: 10\n   },\n   storyContent: {\n      fontSize: dimensions.height / 30,\n   }\n})","import React from 'react';\nimport { Image, ImageSourcePropType, Dimensions } from 'react-native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport WriteStoryScreen from './screens/WriteStoryScreen';\nimport ReadStoryScreen from './screens/ReadStoryScreen';\nimport { NavigationContainer } from '@react-navigation/native';\nimport GLOBALS from './globals';\nimport { createAppContainer, createSwitchNavigator } from 'react-navigation';\nimport PlatformScreen from './screens/PlatformScreen'\nimport StoryContentScreen from './screens/StoryContentScreen'\nconst Tab = createBottomTabNavigator();\n\nexport default class App extends React.Component {\n  \n  render() {\n    return (\n      <AppContainer >\n      </AppContainer>\n    );\n  }\n}\n\nconst SwitchNavigator = createSwitchNavigator({\n  PlatformScreen: {screen: PlatformScreen},\n  StoryContentScreen: {screen: StoryContentScreen},\n});\n\nconst AppContainer = createAppContainer(SwitchNavigator)","module.exports = __webpack_public_path__ + \"static/media/read.bab2041c.png\";","module.exports = __webpack_public_path__ + \"static/media/write.85de73b4.png\";"],"sourceRoot":""}